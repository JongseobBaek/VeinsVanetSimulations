%description: 
Get total avg throughput from 
results file 


%prerun-command: cp -r -v ../../../src/results/B_400Bytes_P_1000Bytes_Q_5-0.sca .

%includes: 
#include <ResultsUtilTest.h>

%file:ResultsUtilTest.h
#ifndef __RESULTSUTILSTEST_H
#define __RESULTSUTILSTESTh_H 

#include <../../../src/ResultsUtil.h> 
#include <fstream>
#include <iostream> 
#include <string> 
#include <vector> 

using namespace std;

class ResultsUtilTest : public ResultsUtil{

	public: 
		void testTotalAvgReturnsZeroWhenThroughputPpsIsZero(){
			vector<string> results = {"throughputPps: 0"}; 
 			createTestFile("ZeroThroughput.sca", results);	
			
			double avgResult = ResultsUtil::totalAvg("ZeroThroughput.sca", "throughputPps:");  	
			cout<< "throughputTotalAvg: " << avgResult<< endl; 
		}

		void testTotalAvgIsNonzeroWhenOneOfTwoThroughputsIsZero(){
			vector<string> results = {"throughputPps: 0", "throughputPps: 2.5"}; 
			createTestFile("ZeroAndNonzeroThroughput.sca", results);
			double avgResult = ResultsUtil::totalAvg("ZeroAndNonzeroThroughput.sca", "throughputPps:"); 
			
			cout<< "throughputTotalAvg: " << avgResult<< endl; 
		}

		void testTotalAvgPrintsErrorWhenTypeNotInFile(){

		}
		void createTestFile(const char* fileName, vector<string> & results){
			cout<<fileName<<endl; 
			ofstream myFile(fileName); 
			if(myFile.is_open())
			{
				
				for(unsigned int i=0; i< results.size(); i++){
					myFile<<results.at(i)<<endl;
				} 
				myFile.close();			
			}else{
				wcerr<<"Cannot open the test file." <<endl; 
			}
			 
		}

		void getTotalAvgFromFileInActualResults(){
			string type = "throughputMbps";
			double avgResult = ResultsUtil::totalAvg("B_400Bytes_P_1000Bytes_Q_5-0.sca", type);
			cout<<type << "	TotalAvg: "<< avgResult << endl;

			type = "throughputMetricMac";
			avgResult = ResultsUtil::totalAvg("B_400Bytes_P_1000Bytes_Q_5-0.sca", type);
			cout<<type << "	TotalAvg: "<< avgResult << endl;

			type = "throughputMetricMac:last";
			avgResult = ResultsUtil::totalAvg("B_400Bytes_P_1000Bytes_Q_5-0.sca", type);
		}

};                                                                                       
                                                                                         
#endif                                                                                   
                                                                                         
%file:package.ned                                                                        
package vanets.tests.work.ResultsUtil_Test;                                              
@namespace(ResultsUtil_Test);                                                            
                                                                                         
%file:test.ned                                                                           
package vanets.tests.work.ResultsUtil_Test;                                              
                                                                                         
simple Test{                                                                             
	                                                                                 
	@isNetwork(true);                                                                
}                                                                                        
                                              
%activity:

ResultsUtilTest* resultsUtilTest = new ResultsUtilTest(); 

resultsUtilTest -> testTotalAvgReturnsZeroWhenThroughputPpsIsZero();

resultsUtilTest -> testTotalAvgIsNonzeroWhenOneOfTwoThroughputsIsZero(); 

resultsUtilTest -> testTotalAvgPrintsErrorWhenTypeNotInFile(); 

resultsUtilTest -> getTotalAvgFromFileInActualResults(); 

%contains: stdout
throughputTotalAvg: 0

%contains: stdout
throughputTotalAvg: 1.25

%contains: stdout
throughputTotalAvg: 0.00075699
